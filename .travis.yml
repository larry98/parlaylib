os: linux
dist: bionic
language: cpp
env: PARLAY_NUM_THREADS=8

stages:
  - analysis
  - build

addons:
  apt:
    update: true
    sources:
    - sourceline: 'ppa:ubuntu-toolchain-r/test'
    - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main'
      key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    packages:
    - g++-7
    - g++-9
    - clang-10
    - libomp-10-dev
    - libtbb-dev

before_script:
  # Install the latest CMake
  - sudo apt remove cmake
  - wget --quiet https://github.com/Kitware/CMake/releases/download/v3.18.2/cmake-3.18.2-Linux-x86_64.tar.gz
  - tar -xf cmake-3.18.2-Linux-x86_64.tar.gz
  - export CMAKE=$PWD/cmake-3.18.2-Linux-x86_64/bin/cmake
  
jobs:
  include:
  
    # -------------------------------------------------------------------------
    #                                TEST STAGE
    # -------------------------------------------------------------------------
  
    # Test that the project builds and tests successfully with GCC
    - stage: test
      name: check-gcc
      script:
      - mkdir build
      - cd build
      - CC=gcc-9 CXX=g++-9 $CMAKE -DCMAKE_BUILD_TYPE=Debug -DPARLAY_TEST=On -DPARLAY_TEST_OMP=On -DPARLAY_TEST_TBB=On -DPARLAY_BENCHMARK=On ..
      - make
      - make check
      
    # Test that the project builds and tests successfully with Clang
    - stage: test
      name: check-clang
      script:
      - mkdir build
      - cd build
      - CC=clang-10 CXX=clang++-10 $CMAKE -DCMAKE_BUILD_TYPE=Debug -DPARLAY_TEST=On -DPARLAY_TEST_OMP=On -DPARLAY_TEST_TBB=On -DPARLAY_BENCHMARK=On ..
      - make
      - make check
      
    # Test that the project builds and tests successfully with GCC 7 (with Cilk support)
    - stage: test
      name: check-gcc-cilk
      script:
      - mkdir build
      - cd build
      - CC=gcc-7 CXX=g++-7 $CMAKE -DCMAKE_BUILD_TYPE=Debug -DPARLAY_TEST=On -DPARLAY_TEST_CILK=On ..
      - make
      - make check

    # -------------------------------------------------------------------------
    #                            ANALYSIS STAGE
    # -------------------------------------------------------------------------
    
    # Run CppCheck on the codebase
    - stage: analysis
      name: cppcheck
      script:
      # Download, build, and install cppcheck
      - wget --quiet https://github.com/danmar/cppcheck/archive/2.1.tar.gz
      - tar -xf 2.1.tar.gz
      - mkdir cppcheck-2.1/build && pushd cppcheck-2.1/build
      - CC=clang-10 CXX=clang++-10 $CMAKE .. -DCMAKE_BUILD_TYPE=Release
      - make && sudo make install
      - popd

      # Run the analysis
      - mkdir build
      - cd build
      - CC=clang CXX=clang++ $CMAKE -DCPPCHECK=On ..
      - make cppcheck-all
      
    # Run clang-tidy on the codebase
    - stage: analysis
      name: clang-tidy
      script:
      # Install clang-tidy
      - sudo apt-get -qq install clang-tidy-10
      - sudo ln -s /usr/bin/clang-tidy-10 /usr/bin/clang-tidy

      # Run the analysis
      - mkdir build
      - cd build
      - CC=clang CXX=clang++ $CMAKE -DCLANG_TIDY=On ..
      - make clang-tidy-all

    # Run include-what-you-use on the codebase
    - stage: analysis
      name: include-what-you-use
      script:
      # Install clang and llvm development files
      - sudo apt-get -qq install clang-10 libc++1-10 libc++-10-dev libc++abi1-10 libc++abi-10-dev llvm-10-dev libclang-10-dev

      # Download, build, and install IWYU
      - git clone https://github.com/include-what-you-use/include-what-you-use.git
      - mkdir include-what-you-use/build && pushd include-what-you-use/build
      - git checkout clang_10
      - $CMAKE -DCMAKE_PREFIX_PATH=/usr/lib/llvm-10 ..
      - make && sudo make install
      - popd

      # Run the analysis
      - mkdir build
      - cd build
      - CC=clang CXX=clang++ $CMAKE -DIWYU=On ..
      - make iwyu-all

    # -------------------------------------------------------------------------
    #                              SANITIZE STAGE
    # -------------------------------------------------------------------------

    
